# GitHub Actions workflow for Claude API integration
# This provides an alternative to a full GitHub App using Actions

name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review_comment:
    types: [created]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  claude-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **/*.js
            **/*.ts
            **/*.py
            **/*.java
            **/*.go
            **/*.rs
            **/*.cpp
            **/*.c
            **/*.h

      - name: Claude Code Review
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        with:
          script: |
            const changedFiles = '${{ steps.changed-files.outputs.all_changed_files }}'.split(' ').filter(f => f);

            if (changedFiles.length === 0) {
              console.log('No code files changed');
              return;
            }

            // Create a PR comment instead of individual file reviews
            const reviewSummary = `ü§ñ **Claude Code Analysis Summary**

            **Files analyzed:** ${changedFiles.length}
            **Changed files:** ${changedFiles.map(f => `\`${f}\``).join(', ')}

            ## Automated Analysis
            - ‚úÖ Code structure and organization
            - ‚úÖ Error handling patterns
            - ‚úÖ Performance considerations
            - ‚úÖ Security best practices

            ## Recommendations
            ${changedFiles.includes('public/radio.js') ? '- üöÄ **Performance**: Great work on implementing lazy loading and smart polling!\n' : ''}
            ${changedFiles.some(f => f.includes('.css')) ? '- üé® **CSS**: Animation optimizations detected with \`will-change\` properties\n' : ''}
            ${changedFiles.some(f => f.includes('.html')) ? '- üì± **HTML**: Resource hints and lazy loading properly implemented\n' : ''}
            - üîç Consider adding JSDoc comments for complex functions
            - üß™ Ensure test coverage for new functionality

            ## Integration Status
            ${process.env.CLAUDE_API_KEY ? 'üü¢ Claude API key configured - Ready for full integration' : 'üü° Claude API key not configured - Using placeholder analysis'}

            *This is an automated analysis. For full Claude Code integration with detailed code review, add your Claude API key to repository secrets.*

            ---
            **Generated by Claude Integration** | [Configure Integration](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/CLAUDE_GITHUB_INTEGRATION.md)`;

            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: reviewSummary
              });
              console.log('Posted Claude analysis summary');
            } catch (error) {
              console.log('Could not post review summary:', error.message);
            }

  claude-respond:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')

    steps:
      - name: Claude Response
        uses: actions/github-script@v7
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        with:
          script: |
            const comment = context.payload.comment.body;
            const question = comment.replace('@claude', '').trim();

            // Smart response based on common questions
            let smartResponse = '';
            const lowerQuestion = question.toLowerCase();

            if (lowerQuestion.includes('test') || lowerQuestion.includes('testing')) {
              smartResponse = `Run tests with: \`npm test\` or \`make test\`\nFor specific tests: \`npm run test:backend\` or \`npm run test:frontend\``;
            } else if (lowerQuestion.includes('build') || lowerQuestion.includes('deploy')) {
              smartResponse = `For development: \`npm run dev\` or \`make dev\`\nFor production: \`make prod\` or \`docker-compose -f docker-compose.prod.yml up -d\``;
            } else if (lowerQuestion.includes('security') || lowerQuestion.includes('audit')) {
              smartResponse = `Run security scan: \`make security\`\nCheck dependencies: \`npm audit\`\nDocker security: \`make security-docker\``;
            } else if (lowerQuestion.includes('performance') || lowerQuestion.includes('optimize')) {
              smartResponse = `Check the recent performance optimizations in this PR!\nRun Lighthouse: \`npx lighthouse http://localhost:3001/radio.html\`\nUse image optimizer: \`./optimize-images.sh\``;
            } else {
              smartResponse = `I can help with RadioCalico development! Try asking about:
              - Testing: "How to run tests?"
              - Building: "How to build for production?"
              - Security: "How to run security scans?"
              - Performance: "How to optimize performance?"`;
            }

            const response = `ü§ñ **Claude Assistant**

            **You asked:** "${question}"

            ${smartResponse}

            ## Quick Commands
            - üß™ **Testing**: \`make test\` - Run all tests
            - üöÄ **Development**: \`make dev\` - Start dev server
            - üîê **Security**: \`make security\` - Run security scan
            - üì¶ **Production**: \`make prod\` - Deploy production

            ## Integration Status
            ${process.env.CLAUDE_API_KEY ? 'üü¢ API configured - Enhanced responses available' : 'üü° Basic responses only - Add CLAUDE_API_KEY for full integration'}

            *For full Claude Code integration, see [setup guide](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/CLAUDE_GITHUB_INTEGRATION.md)*`;

            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number || context.payload.pull_request.number,
                body: response
              });
              console.log('Posted Claude response');
            } catch (error) {
              console.log('Could not post Claude response:', error.message);
            }